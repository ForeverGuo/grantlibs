import{_ as a,c as s,o as n,a4 as e}from"./chunks/framework.BZPRC472.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"python/little_book/Python 编程第一课：快速上手 Python.md","filePath":"python/little_book/Python 编程第一课：快速上手 Python.md","lastUpdated":1742270123000}'),t={name:"python/little_book/Python 编程第一课：快速上手 Python.md"},p=e(`<h2 id="python-环境搭建" tabindex="-1">Python 环境搭建 <a class="header-anchor" href="#python-环境搭建" aria-label="Permalink to &quot;Python 环境搭建&quot;">​</a></h2><p>为了开始 Python 编程之旅，首先需要搭建 Python 环境。以下是简洁的环境搭建步骤：</p><ol><li><p><strong>安装 Python</strong></p><ul><li>访问 <a href="https://www.python.org/" target="_blank" rel="noreferrer">Python 官方网站</a> 下载最新版本的 Python 安装包。</li><li>按照安装向导完成安装，确保勾选“Add Python to PATH”选项。</li></ul></li><li><p><strong>安装集成开发环境 (IDE)</strong></p><ul><li><strong>PyCharm</strong>：功能强大，适合大型项目开发，有社区版和专业版。</li><li><strong>VS Code</strong>：轻量级但功能丰富，可通过插件扩展功能，适合各种规模项目。</li><li><strong>Jupyter Notebook</strong>：适合数据科学和机器学习，支持交互式编程。</li></ul></li><li><p><strong>验证安装</strong></p><ul><li>打开命令提示符或终端，输入 <code>python --version</code> 检查 Python 是否安装成功。</li><li>输入 <code>pip --version</code> 检查 pip 是否可用，pip 是 Python 的包管理工具。</li></ul></li><li><p><strong>安装常用库</strong></p><ul><li>使用 <code>pip install</code> 命令安装所需库，如 <code>numpy</code>、<code>pandas</code> 等。</li></ul></li></ol><p>推荐开发工具：</p><ul><li><strong>PyCharm</strong>：适合初学者和专业开发者，提供智能代码补全、调试工具等功能。</li><li><strong>VS Code</strong>：轻量且灵活，支持多种编程语言，拥有丰富的插件生态系统。</li><li><strong>Jupyter Notebook</strong>：专为数据科学家设计，支持代码、文本、图表的混合编写。</li></ul><h2 id="基础语法" tabindex="-1">基础语法 <a class="header-anchor" href="#基础语法" aria-label="Permalink to &quot;基础语法&quot;">​</a></h2><h3 id="变量与数据类型" tabindex="-1">变量与数据类型 <a class="header-anchor" href="#变量与数据类型" aria-label="Permalink to &quot;变量与数据类型&quot;">​</a></h3><ul><li><strong>变量：无需声明类型，直接赋值。</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>name = &quot;Alice&quot;</span></span>
<span class="line"><span>age = 25</span></span>
<span class="line"><span>height = 1.68</span></span>
<span class="line"><span>is_student = True</span></span></code></pre></div><ul><li><strong>数据类型：</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>整数：int（如 10）</span></span>
<span class="line"><span></span></span>
<span class="line"><span>浮点数：float（如 3.14）</span></span>
<span class="line"><span></span></span>
<span class="line"><span>字符串：str（如 &quot;Hello&quot;）</span></span>
<span class="line"><span></span></span>
<span class="line"><span>布尔值：bool（如 True、False）</span></span>
<span class="line"><span></span></span>
<span class="line"><span>列表：list（如 [1, 2, 3]）</span></span>
<span class="line"><span></span></span>
<span class="line"><span>元组：tuple（如 (1, 2, 3)）</span></span>
<span class="line"><span></span></span>
<span class="line"><span>字典：dict（如 {&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 25}）</span></span>
<span class="line"><span></span></span>
<span class="line"><span>集合：set（如 {1, 2, 3}）</span></span></code></pre></div><h3 id="输入与输出" tabindex="-1">输入与输出 <a class="header-anchor" href="#输入与输出" aria-label="Permalink to &quot;输入与输出&quot;">​</a></h3><ul><li><strong>输出</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>print(&quot;Hello, World!&quot;)</span></span></code></pre></div><ul><li><strong>输入</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>name = input(&quot;Enter your name: &quot;)</span></span>
<span class="line"><span>print(f&quot;Hello, {name}!&quot;)</span></span></code></pre></div><h3 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h3><ul><li>算术运算符：+, -, *, /, //（整除）, %（取余）, **（幂）</li><li>比较运算符：==, !=, &gt;, &lt;, &gt;=, &lt;=</li><li>逻辑运算符：and, or, not</li><li>赋值运算符：=, +=, -=, *=, /=</li></ul><h2 id="控制流" tabindex="-1">控制流 <a class="header-anchor" href="#控制流" aria-label="Permalink to &quot;控制流&quot;">​</a></h2><ul><li><strong>条件语句</strong><ul><li>if-elif-else：</li></ul></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>age = 18</span></span>
<span class="line"><span>  if age &lt; 18:</span></span>
<span class="line"><span>      print(&quot;未成年&quot;)</span></span>
<span class="line"><span>  elif age == 18:</span></span>
<span class="line"><span>      print(&quot;刚成年&quot;)</span></span>
<span class="line"><span>  else:</span></span>
<span class="line"><span>      print(&quot;成年&quot;)</span></span></code></pre></div><ul><li><strong>循环</strong><ul><li>for 循环：</li></ul></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>for i in range(5):</span></span>
<span class="line"><span>    print(i)</span></span></code></pre></div><ul><li>while 循环：</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>count = 0</span></span>
<span class="line"><span>while count &lt; 5:</span></span>
<span class="line"><span>    print(count)</span></span>
<span class="line"><span>    count += 1</span></span></code></pre></div><h2 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h2><ul><li><strong>定义函数:</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>def greet(name):</span></span>
<span class="line"><span>    return f&quot;Hello, {name}!&quot;</span></span></code></pre></div><ul><li><strong>调用函数:</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>print(greet(&quot;Bob&quot;))</span></span></code></pre></div><ul><li><strong>默认参数:</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>def greet(name=&quot;Guest&quot;):</span></span>
<span class="line"><span>    return f&quot;Hello, {name}!&quot;</span></span></code></pre></div><ul><li><strong>Lambda 函数:</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>square = lambda x: x ** 2</span></span>
<span class="line"><span>print(square(5))  # 输出: 25</span></span></code></pre></div><h2 id="数据结构" tabindex="-1">数据结构 <a class="header-anchor" href="#数据结构" aria-label="Permalink to &quot;数据结构&quot;">​</a></h2><h3 id="列表-list" tabindex="-1">列表（List） <a class="header-anchor" href="#列表-list" aria-label="Permalink to &quot;列表（List）&quot;">​</a></h3><ul><li><strong>创建列表:</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>fruits = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;]</span></span></code></pre></div><ul><li><strong>常用操作:</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>fruits.append(&quot;orange&quot;)  # 添加元素</span></span>
<span class="line"><span>fruits.remove(&quot;banana&quot;)  # 删除元素</span></span>
<span class="line"><span>print(fruits[0])         # 访问元素</span></span></code></pre></div><h3 id="字典-dictionary" tabindex="-1">字典（Dictionary） <a class="header-anchor" href="#字典-dictionary" aria-label="Permalink to &quot;字典（Dictionary）&quot;">​</a></h3><ul><li><strong>创建字典:</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>person = {&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 25}</span></span></code></pre></div><ul><li><strong>常用操作:</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>print(person[&quot;name&quot;])  # 访问值</span></span>
<span class="line"><span>person[&quot;age&quot;] = 26     # 修改值</span></span>
<span class="line"><span>person[&quot;city&quot;] = &quot;New York&quot;  # 添加键值对</span></span></code></pre></div><h3 id="集合-set" tabindex="-1">集合（Set） <a class="header-anchor" href="#集合-set" aria-label="Permalink to &quot;集合（Set）&quot;">​</a></h3><ul><li><strong>创建集合:</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numbers = {1, 2, 3}</span></span></code></pre></div><ul><li><strong>常用操作:</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>numbers.add(4)  # 添加元素</span></span>
<span class="line"><span>numbers.remove(2)  # 删除元素</span></span></code></pre></div><h3 id="元组-tuple" tabindex="-1">元组（Tuple） <a class="header-anchor" href="#元组-tuple" aria-label="Permalink to &quot;元组（Tuple）&quot;">​</a></h3><ul><li><strong>创建元组(不可变特性):</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>tup1 = (1, &quot;a&quot;, [2, 3]) </span></span>
<span class="line"><span>tup3 = 10, &quot;b&quot;, True  # 等价于 (10, &quot;b&quot;, True)‌</span></span></code></pre></div><ul><li><strong>常用操作:</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>print(tup1)   # 输出: 1, 索引从 0 开始访问</span></span>
<span class="line"><span>subtup2 = tup1[1:3]   # 切片操作 输出：(&quot;a&quot;, [2, 3])‌</span></span>
<span class="line"><span>length = len(tup1) # 元素总数 输出: 3</span></span>
<span class="line"><span>idx = tup1.index(&quot;a&quot;) # 获取元素的索引 输出: 1</span></span>
<span class="line"><span>cnt = tup1.count(&quot;a&quot;) # 统计元素出现的次数 输出: 1</span></span></code></pre></div><h2 id="文件操作" tabindex="-1">文件操作 <a class="header-anchor" href="#文件操作" aria-label="Permalink to &quot;文件操作&quot;">​</a></h2><h3 id="基础语法-1" tabindex="-1">基础语法 <a class="header-anchor" href="#基础语法-1" aria-label="Permalink to &quot;基础语法&quot;">​</a></h3><ul><li><p><strong>open函数</strong></p><p>open(file, mode=&#39;r&#39;, buffering=-1, encoding=None)</p></li></ul><table><thead><tr><th>名称</th><th>用法</th></tr></thead><tbody><tr><td>file</td><td>文件路径（支持绝对路径和相对路径）‌</td></tr><tr><td>mode</td><td>打开模式，默认 &#39;r&#39;（只读）</td></tr><tr><td>buffering</td><td>设置缓存区 (&#39;-1&#39;: 默认系统自动分配)</td></tr><tr><td>encoding</td><td>指定编码（如 &#39;utf-8&#39;，处理中文文件必填）‌</td></tr></tbody></table><h3 id="读取文件" tabindex="-1">读取文件 <a class="header-anchor" href="#读取文件" aria-label="Permalink to &quot;读取文件&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>with open(&quot;file.txt&quot;, &quot;r&quot;) as file:</span></span>
<span class="line"><span>    content = file.read()</span></span>
<span class="line"><span>    print(content)</span></span></code></pre></div><h3 id="写入文件" tabindex="-1">写入文件 <a class="header-anchor" href="#写入文件" aria-label="Permalink to &quot;写入文件&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>with open(&quot;file.txt&quot;, &quot;w&quot;) as file:</span></span>
<span class="line"><span>    file.write(&quot;Hello, World!&quot;)</span></span></code></pre></div><h2 id="异常处理" tabindex="-1">异常处理 <a class="header-anchor" href="#异常处理" aria-label="Permalink to &quot;异常处理&quot;">​</a></h2><h3 id="try-except" tabindex="-1">try-except <a class="header-anchor" href="#try-except" aria-label="Permalink to &quot;try-except&quot;">​</a></h3><ul><li><strong>常见报错类型</strong></li></ul><table><thead><tr><th>名称</th><th>类型</th></tr></thead><tbody><tr><td>语法与结构错误</td><td>SyntaxError</td></tr><tr><td>变量与类型错误</td><td>NameError/TypeError</td></tr><tr><td>数据容器错误</td><td>IndexError‌/KeyError</td></tr><tr><td>运算与输入输出错误</td><td>ZeroDivisionError‌</td></tr><tr><td>模块与编码错误</td><td>ImportError/ModuleNotFoundError‌</td></tr></tbody></table><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>try:</span></span>
<span class="line"><span>    result = 10 / 0</span></span>
<span class="line"><span>except ZeroDivisionError:</span></span>
<span class="line"><span>    print(&quot;不能除以零&quot;)</span></span></code></pre></div><h2 id="模块与包" tabindex="-1">模块与包 <a class="header-anchor" href="#模块与包" aria-label="Permalink to &quot;模块与包&quot;">​</a></h2><h3 id="导入模块" tabindex="-1">导入模块 <a class="header-anchor" href="#导入模块" aria-label="Permalink to &quot;导入模块&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>import math # 系统模块</span></span>
<span class="line"><span>print(math.sqrt(16))  # 输出: 4.0</span></span></code></pre></div><h3 id="安装第三方包" tabindex="-1">安装第三方包 <a class="header-anchor" href="#安装第三方包" aria-label="Permalink to &quot;安装第三方包&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pip install requests</span></span></code></pre></div><h3 id="使用第三方包" tabindex="-1">使用第三方包 <a class="header-anchor" href="#使用第三方包" aria-label="Permalink to &quot;使用第三方包&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>import requests</span></span>
<span class="line"><span>response = requests.get(&quot;https://www.example.com&quot;)</span></span>
<span class="line"><span>print(response.status_code)</span></span></code></pre></div><h2 id="面向对象编程-oop" tabindex="-1">面向对象编程（OOP） <a class="header-anchor" href="#面向对象编程-oop" aria-label="Permalink to &quot;面向对象编程（OOP）&quot;">​</a></h2><h3 id="定义类" tabindex="-1">定义类 <a class="header-anchor" href="#定义类" aria-label="Permalink to &quot;定义类&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>class Person:</span></span>
<span class="line"><span>    def __init__(self, name, age):</span></span>
<span class="line"><span>        self.name = name</span></span>
<span class="line"><span>        self.age = age</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    def greet(self):</span></span>
<span class="line"><span>        return f&quot;Hello, my name is {self.name}.&quot;</span></span></code></pre></div><h3 id="创建对象" tabindex="-1">创建对象 <a class="header-anchor" href="#创建对象" aria-label="Permalink to &quot;创建对象&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>person = Person(&quot;Alice&quot;, 25)</span></span>
<span class="line"><span>print(person.greet())</span></span></code></pre></div><h3 id="三大特性" tabindex="-1">三大特性 <a class="header-anchor" href="#三大特性" aria-label="Permalink to &quot;三大特性&quot;">​</a></h3><ul><li><p><strong>封装</strong></p><p>将数据（属性）和操作（方法）封装在类中，通过访问控制（如私有属性 _var）隐藏实现细节‌</p></li><li><p><strong>继承</strong></p></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>class Bob(Person):</span></span>
<span class="line"><span>    _hobby = &quot;music&quot;  # 类似有属性</span></span>
<span class="line"><span>    def sing(self):</span></span>
<span class="line"><span>        print(&quot;sing.&quot;)</span></span></code></pre></div><ul><li><p><strong>多态</strong></p><ul><li>基于类继承的多态示例</li></ul></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># 基类定义  </span></span>
<span class="line"><span>class Animal:  </span></span>
<span class="line"><span>    def make_sound(self):  </span></span>
<span class="line"><span>        pass  </span></span>
<span class="line"><span></span></span>
<span class="line"><span># 子类重写方法  </span></span>
<span class="line"><span>class Dog(Animal):  </span></span>
<span class="line"><span>    def make_sound(self):  </span></span>
<span class="line"><span>        print(&quot;汪汪！&quot;)  </span></span>
<span class="line"><span></span></span>
<span class="line"><span>class Cat(Animal):  </span></span>
<span class="line"><span>    def make_sound(self):  </span></span>
<span class="line"><span>        print(&quot;喵喵！&quot;)  </span></span>
<span class="line"><span></span></span>
<span class="line"><span># 多态调用函数  </span></span>
<span class="line"><span>def animal_sound(animal_obj):  </span></span>
<span class="line"><span>    animal_obj.make_sound()  </span></span>
<span class="line"><span></span></span>
<span class="line"><span># 使用示例  </span></span>
<span class="line"><span>dog = Dog()  </span></span>
<span class="line"><span>cat = Cat()  </span></span>
<span class="line"><span></span></span>
<span class="line"><span>animal_sound(dog)  # 输出：汪汪！‌ </span></span>
<span class="line"><span>animal_sound(cat)  # 输出：喵喵！‌</span></span></code></pre></div><ul><li>函数多态示例（鸭子类型）</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>class Car:  </span></span>
<span class="line"><span>    def run(self):  </span></span>
<span class="line"><span>        print(&quot;汽车行驶&quot;)  </span></span>
<span class="line"><span></span></span>
<span class="line"><span>class Bicycle:  </span></span>
<span class="line"><span>    def run(self):  </span></span>
<span class="line"><span>        print(&quot;自行车骑行&quot;)  </span></span>
<span class="line"><span></span></span>
<span class="line"><span>def start(vehicle):  </span></span>
<span class="line"><span>    vehicle.run()  </span></span>
<span class="line"><span></span></span>
<span class="line"><span># 调用示例  </span></span>
<span class="line"><span>start(Car())      # 输出：汽车行驶  </span></span>
<span class="line"><span>start(Bicycle())  # 输出：自行车骑行</span></span></code></pre></div><p>‌核心逻辑‌：只要对象实现了 run 方法，即可传入 start 函数，无需强制继承同一基类‌</p><h2 id="实践练习" tabindex="-1">实践练习 <a class="header-anchor" href="#实践练习" aria-label="Permalink to &quot;实践练习&quot;">​</a></h2><ul><li><p><strong>练习 1：</strong> 编写一个程序，计算列表中所有数字的平均值。</p></li><li><p><strong>练习 2：</strong> 编写一个函数，判断一个字符串是否是回文。</p></li><li><p><strong>练习 3：</strong> 使用面向对象编程，设计一个简单的“学生管理系统”。</p></li></ul>`,90),l=[p];function i(o,c,r,d,u,h){return n(),s("div",null,l)}const v=a(t,[["render",i]]);export{b as __pageData,v as default};
